package api

import (
	"fmt"
	"github.com/gin-gonic/gin"
	"os"
	"server/config"
	"server/tools"
	"strconv"
	"strings"
)

var Layout = "2006-01-02 15:04:05"
// NewServer create server
func NewServer() *gin.Engine {
	r := gin.Default()
	mode := os.Getenv("MODE")
	s := os.Environ()
	if len(s) > 0 {
		mode = s[0]
	}
	switch mode {
	case "debug":
		gin.SetMode(gin.DebugMode)
	case "test":
		gin.SetMode(gin.TestMode)
	case "release":
		gin.SetMode(gin.ReleaseMode)
	default:
		gin.SetMode(gin.DebugMode)
	}
	config.InitDatabase()
	for _, reg := range routerRegisters {
		reg(&RouterGroup{
			routerGroup: &r.RouterGroup,
		})
	}
	return r
}

// NewError create server error
func NewError(code int, message string) error {
	return &Error{Code: code, Message: message}
}

// Error server error
type Error struct {
	// Code is The status code generated by the server.
	Code int
	// Message is a human-readable explanation specific to this occurrence of the problem.
	Message string
}

// Error
func (e *Error) Error() string {
	return fmt.Sprintf("%d : %s", e.Code, e.Message)
}

var routerRegisters []func(*RouterGroup)

// SetRouterRegister 设置路由注册器
func SetRouterRegister(reg func(group *RouterGroup)) {
	routerRegisters = append(routerRegisters, reg)
}

// ParamConstruct ParamConstruct值类型
type ParamConstruct struct {
	FieldName    string
	DefaultValue interface{}
	CheckValue   []interface{}
	Need         bool
	Link         string
	Symbol       string
}

// GetParams 获取前端参数
func (c *Context) GetParams(parConstruct map[string]*ParamConstruct) (map[string]string, error) {
	if len(parConstruct) == 0 {
		return nil, c.Error("params is null")
	}
	newParams := make(map[string]string, 0)
	for k, v := range parConstruct {
		strParam := c.Query(k)
		//1.无值且必传,直接返回
		if len(strParam) == 0 && v.Need {
			return nil, c.Error("param " + k + " is null")
		}
		//2.验证参数值
		var newParamValue string
		if len(strParam) > 0 {
			err := c.CheckParam(k, strParam, v.CheckValue)
			if err != nil {
				return nil, err
			}
			newParamValue = strParam
		} else {
			newParamValue = tools.String(v.DefaultValue)
		}
		//3.添加有值的参数
		newParams[k] = newParamValue
	}
	return newParams, nil
}

// GetPager 获取分页参数
func (c *Context) GetPager() (pageIndex, pageSize uint, code int, err error) {
	pIndex := c.Query("pageIndex")
	if len(pIndex) == 0 {
		pageIndex = 1 //默认查第一页
	} else {
		mPageIndex, err := strconv.Atoi(pIndex)
		if err != nil || mPageIndex <= 0 {
			return pageIndex, pageSize, 59998, c.Error("pageIndex is invalid, pageIndex：" + pIndex)
		}
		pageIndex = uint(mPageIndex)
	}
	pSize := c.Query("pageSize")
	if len(pSize) == 0 {
		pageSize = 10000 //默认查10000条
	} else {
		mPageSize, err := strconv.Atoi(pSize)
		if err != nil || mPageSize <= 0 {
			return pageIndex, pageSize, 59999, c.Error("pageSize is invalid, pageSize：" + pSize)
		}
		pageSize = uint(mPageSize)
	}
	return pageIndex, pageSize, code, nil
}

// GetConditionByParam 检测前端参数并根据参数生成sql查询条件,支持无参无条件情况
func (c *Context) GetConditionByParam(parConstruct map[string]*ParamConstruct) (string, []interface{}, error) {
	if len(parConstruct) == 0 {
		return "", nil, nil
	}
	strCondition := " 1=1 "
	args := make([]interface{}, 0)
	orderByStr := ""
	for k, v := range parConstruct {
		strParam := c.Query(k)
		//1.无值且必传,直接返回
		if len(strParam) == 0 && v.Need {
			return "", nil, c.Error("need param " + k + " is null")
		}
		//2.验证参数值
		if len(strParam) > 0 {
			err := c.CheckParam(k, strParam, v.CheckValue)
			if err != nil {
				return "", nil, err
			}
		}
		//3.orderBy特殊处理
		if k == "orderBy" {
			orderByStr = genOrder(strParam, v)
		} else if k == "searchKey" { //4.searchKey特殊处理,关键字搜索,则按FieldName字段名模糊查找
			//模糊查找无值不需要执行like
			if len(strParam) == 0 {
				continue
			}
			var condition string
			_, e := strconv.Atoi(strParam)
			for _, fieldName := range strings.Split(v.FieldName, "|") {
				if e == nil { //数值型
					condition += fieldName + " = ? or "
					args = append(args, strParam)
				} else { //字符串
					condition += fieldName + " like ? or "
					args = append(args, "%"+strParam+"%")
				}
			}
			if len(condition) > 0 {
				strCondition += " " + v.Link + " ( " + strings.TrimSuffix(condition, "or ") + " ) "
			}
		} else if k == "accessPerson" { //如果是按接入人搜索
			//接入人,不传或传0表示查所有人;1表示本人创建;2表示同事创建
			if strParam == "" || strParam == "0" || len(strParam) == 0 {
				continue
			}
			//Symbol: "=|!=" 、 "=|<>" 、 "like|not like"
			symbols := strings.Split(v.Symbol, "|")
			if len(symbols) != 2 {
				continue
			}
			nParConstruct := ParamConstruct{
				FieldName: v.FieldName,
				Link:      v.Link,
			}
			if strParam == "1" { //self
				nParConstruct.Symbol = symbols[0]
			}
			if strParam == "2" { //colleague
				nParConstruct.Symbol = symbols[1]
			}
			strCondition += genCondition(&nParConstruct)
			loginName := c.GetHeader("loginName")
			if nParConstruct.Symbol == "like" || nParConstruct.Symbol == "not like" {
				args = append(args, "%"+loginName+"%")
			} else {
				args = append(args, loginName)
			}
		} else {
			//4.其它参数
			if len(strParam) > 0 && k == "startTime" {
				strParam = strings.TrimSpace(strParam) + " 00:00:00"
			}
			if len(strParam) > 0 && k == "endTime" {
				strParam = strings.TrimSpace(strParam) + " 23:59:59"
			}

			arg := genArgs(strParam, v)
			if arg != nil && len(tools.String(arg)) > 0 {
				strCondition += genCondition(v)
				if v.Symbol == "like" || v.Symbol == "not like" {
					args = append(args, "%"+tools.String(arg)+"%")
				} else {
					args = append(args, arg)
				}
			}
		}
	}
	if len(orderByStr) > 0 {
		strCondition += orderByStr
	}
	c.Info(strCondition)
	return strCondition, args, nil
}

// CheckParam 检验参数值
func (c *Context) CheckParam(key string, param interface{}, defaultValue []interface{}) error {
	c.Info("CheckParam key:", key, ";param:", param, ";defaultValue:", defaultValue)
	//1.参数值为空,返回错误
	if param == nil || tools.String(param) == "" {
		return c.Error("param " + key + " is null")
	}
	//2.没有定义取值范围数组,表示参数有值,正常返回nil
	if defaultValue == nil || len(defaultValue) == 0 {
		return nil
	}
	//3.有取值范围数组,判断该参数值是否在取值范围内
	var isIn = false
	for _, v := range defaultValue {
		if tools.String(v) == tools.String(param) {
			isIn = true
			break
		}
	}
	//在取值范围内,正常返回nil
	if isIn {
		return nil
	}
	//不在取值范围内,返回错误
	return c.Error("param " + key + " value is error")
}

// genCondition 生成条件
func genCondition(paramConstruct *ParamConstruct) string {
	//" " + and/or + " " +  fieldName + " " + =/<>/!=/>/</>=/<=/like/not like + " ? "
	return " " + paramConstruct.Link + " " + paramConstruct.FieldName + " " + paramConstruct.Symbol + " ? "
}

// genOrder 生成OrderBy条件
func genOrder(param string, paramConstruct *ParamConstruct) string {
	var retCondition string
	if len(param) == 0 {
		if paramConstruct.DefaultValue == nil || len(tools.String(paramConstruct.DefaultValue)) == 0 {
			param = "id|desc"
		} else {
			param = tools.String(paramConstruct.DefaultValue)
		}
	}
	orderBy := strings.Split(param, "|")
	if orderBy != nil && len(orderBy[:]) == 2 && (orderBy[1] == "asc" || orderBy[1] == "desc") {
		retCondition += " order by " + orderBy[0] + " " + orderBy[1] + " "
	} else {
		retCondition += " order by id desc "
	}
	return retCondition
}

// genArgs 生成条件值
func genArgs(param string, paramConstruct *ParamConstruct) interface{} {
	var value interface{}
	if len(param) == 0 {
		value = paramConstruct.DefaultValue
	} else {
		value = param
	}
	nValue := tools.String(value)
	if len(nValue) > 0 && paramConstruct.Symbol == "like" {
		return "%" + nValue + "%"
	}
	return value
}
